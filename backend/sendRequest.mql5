//+------------------------------------------------------------------+
//|                                                ftmoh(manual).mq5 |
//|                                  Copyright 2024, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2024, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int i = 0;

int OnInit()
  {
//---
   
//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
//---
   
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
//---
   
  }
//+------------------------------------------------------------------+
//| ChartEvent function                                              |
//+------------------------------------------------------------------+
void req(ulong orderT,ulong dealT){
   //Print(orderTicket,"  ",dealTicket);
      
   ulong ticket = dealT;
   ulong orderTicket = orderT;


   double getVol = HistoryDealGetDouble(ticket,DEAL_VOLUME);
   double grossProfit = HistoryDealGetDouble(ticket, DEAL_PROFIT);
   double commision = HistoryDealGetDouble(ticket, DEAL_COMMISSION);
   double netProfit = grossProfit - commision;
   string symbol = HistoryDealGetString(ticket, DEAL_SYMBOL); 
   datetime endTime = HistoryOrderGetInteger(orderTicket, ORDER_TIME_DONE);
   ENUM_ORDER_TYPE type = HistoryOrderGetInteger(orderTicket, ORDER_TYPE);
   double positionSize = HistoryOrderGetDouble(orderTicket, ORDER_VOLUME_INITIAL);
   double sl = HistoryDealGetDouble(ticket,DEAL_SL);
   
   double tp = HistoryDealGetDouble(ticket,DEAL_TP);
   double accountBalance = AccountInfoDouble(ACCOUNT_BALANCE);
 
   //Print(grossProfit);
   
//   if(startTimeMs > 1000){
//      startTime = PositionGetInteger(POSITION_TIME);
//   }
   
   
   string baseUrl = "http://172.105.24.24:8080";
   string url = baseUrl + "/?symbol=" + symbol + "&profit=" + "&endTime=" + endTime + netProfit + "&type=" + type + "&positionSize=" + positionSize + "&tp=" + tp + "&sl=" + sl + "&accountBalance=" + accountBalance;
   
   string cookie=NULL,headers;
   char result2[], data[];
   
   if(grossProfit != 0){
      PrintFormat("U Just Traded %s, netting you %f",symbol,netProfit);
      int response = WebRequest("GET",url,cookie,NULL,500,data,0,result2,headers);
      Print(response);
   }
  
}

void OnChartEvent(const int id,
                  const long &lparam,
                  const double &dparam,
                  const string &sparam)
  {

   if(lparam == 17){   
      i++;
      if(i == 2){
        int dealTotal = HistoryDealsTotal(); 
         for(int n=0;n<dealTotal;n++){
            //ulong orderTicket = HistoryOrderGetTicket(i);
            req(HistoryOrderGetTicket(n),HistoryDealGetTicket(n));   
         }
         
         i = 0;
      }      
      
   }
  }
//+------------------------------------------------------------------+

